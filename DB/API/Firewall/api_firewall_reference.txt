-------------------------------------------------------------------------------
3.3 Firewall (Access control from the outside world)
-------------------------------------------------------------------------------

3.3.1 Overview

    IMPULSE allows for the management of firewall rules for configured 
    addresses. Addresses (interfaces) can have individual firewall rules 
    or be a member of a Metahost, or group of hosts. A metahost will apply 
    its rules to all members equally, thus providing for a single set of 
    rules for all devices. 

    Different firewall software packages have differences in syntax, so 
    IMPULSE tracks what firewall systems run what software to provide for the 
    proper output. 

3.3.2 Functions

3.3.2.1 Create metahost membership

    Assign an IP address to a metahost

    Definition:
        api.create_firewall_metahost_member(address inet, metahost text)

    Arguments:
        address - The address to assign
        metahost - The metahost name to assign the address to

    Returns
        void

    Rules:
        Once you are a member of a metahost, you cannot have other rules
        You can only be a member of one metahost

    Example:
        SELECT api.create_firewall_metahost_member('10.0.0.1','Servers');

3.3.2.2 Create metahost

    Create a new metahost

    Definition:
        api.create_firewall_metahost(name text, comment text, owner text)

    Arguments:
        name - The name of the metahost
        comment - A comment on the new metahost (or NULL for no comment)
        owner - The owning username (or NULL for current user)

    Returns
        void

    Rules:
        Names must be unique (primary key)

    Example:
        SELECT api.create_firewall_metahost('Servers','All servers on the network',NULL);

3.3.2.3 Create metahost rule

    Create a new rule for a metahost to be applied to all members.

    Definition:
        api.create_firewall_metahost_rule(name text, port integer, transport text, 
        deny boolean, owner text, comment text)

    Arguments:
        name - Metahost name to apply to
        port - Port to perform the action on
        transport - TCP or UDP or BOTH
        deny - TRUE or FALSE to deny traffic
        owner - The owning username (or NULL for current user)
        comment - A comment on the rule

    Returns
        void

    Rules:
        No conflicting rules (Deny and Allow a port?) (primary key)

    Example:
        SELECT api.create_firewall_metahost_rule('Servers',22,'TCP',FALSE,
        'root','Allow SSH traffic');

3.3.2.4 Create Firewall System

    Establish a system as a firewall and specify its software so the proper 
    rule syntax can be used.

    Definition:
        api.create_firewall_system(name text, subnet cidr, software text)

    Arguments:
        name - The system name of the firewall
        subnet - The subnet for which this system controls
        software - The system software

    Returns
        void

    Rules:
        A system may control more than 1 subnet

    Example:
        SELECT api.create_firewall_system('Firewall1','10.0.0.0/24',
        'Cisco IOS');

3.3.2.5 Create Rule

    Create a new standalone firewall rule

    Definition:
        api.create_firewall_rule(address inet, port integer, transport text, 
        deny boolean,owner text, comment text)

    Arguments:
        address - Address to apply the rule to
        port - Port to perform on
        transport - TCP or UDP or BOTH
        deny - TRUE to Deny traffic, FALSE to allow traffic
        owner - The owning username (or NULL for current user)
        comment - A comment on the rule (or NULL for no comment)

    Returns
        void

    Rules:
        Unique actions per port/transport (primary key)
        Cannot be a member of a metahost

    Example:
        SELECT api.create_firewall_rule('10.0.0.1',22,'TCP',TRUE,
        NULL,'Block SSH traffic');

3.3.2.6 Create Rule From Program

    Create a firewall rule from a common program registered in the application

    Definition:
        api.create_firewall_rule_program(address inet, program text, 
        deny boolean, owner text)

    Arguments:
        address - The address to create the rule on
        program - The name of the program to act upon
        deny - TRUE to deny traffic, FALSE to allow
        owner - The owning username (or NULL for current user)

    Returns
        void

    Rules:
        None

    Example:
        SELECT api.create_firewall_rule_program('10.0.0.1','SSH',TRUE,'root');

3.3.2.7 Create Metahost Rule From Program

    Create a firewall metahost rule from a common program registered in 
    the application

    Definition:
        api.create_firewall_metahost_rule_program(metahost text, program text, 
        deny boolean)

    Arguments:
        metahost - The metahost to create the rule on
        program - The name of the program to act upon
        deny - TRUE to deny traffic, FALSE to allow

    Returns
        void

    Rules:
        None

    Example:
        SELECT api.create_firewall_metahost_rule_program('Servers','SSH',TRUE);

3.3.2.8 Remove metahost membership

    Remove an address from any metahost it might be attached to

    Definition:
        api.remove_firewall_metahost_member(address inet)

    Arguments:
        address - The IP address to remove

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_firewall_metahost_member('10.0.0.1');

3.3.2.9 Remove metahost

    Remove a metahost from the database. This will also erase all rules 
    associated with its members.

    Definition:
        api.remove_firewall_metahost(name text)

    Arguments:
        name - The name of the metahost to remove

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_firewall_metahost('Servers');

3.3.2.10 Remove metahost rule

    Delete a metahost rule and erase all references to it.

    Definition:
        api.remove_firewall_metahost_rule(name text, port integer, transport text)

    Arguments:
        name - The metahost name this rule applied to
        port - The port of the rule
        transport - TCP or UDP or BOTH

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_firewall_metahost_rule('Servers',22,'TCP');

3.3.2.11 Remove Firewall System

    Delete a firewall system from the database

    Definition:
        api.remove_firewall_system(name text)

    Arguments:
        name - Name of the firewall system to remove

    Returns:
        void

    Rules:
        None

    Example:
        SELECT pi.remove_firewall_system('Firewall1');

3.3.2.12 Remove a Rule

    Erase a standalone rule

    Definition:
        api.remove_firewall_rule(address inet, port integer, transport text)

    Arguments:
        address - Address of the rule to remove
        port - Port to affect
        transport - TCP or UDP or BOTH

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_firewall_rule('10.0.0.1',22,'TCP');

3.3.2.13 Remove Rule Based On Program

    Remove a firewall rule from a common program registered in the application

    Definition:
        api.remove_firewall_rule_program(address inet, program text)

    Arguments:
        address - The address to remove the rule from
        program - The name of the program to act upon

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_firewall_rule_program('10.0.0.1','SSH');

3.3.2.14 Remove Metahost Rule Based On Program

    Remove a firewall metahost rule from a common program registered 
    in the application

    Definition:
        api.remove_firewall_metahost_rule_program(metahost text, program text)

    Arguments:
        metahost - The metahost name to remove the rule on
        program - The name of the program to act upon

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_firewall_metahost_rule_program('Servers','SSH');

3.3.2.15 Modify device default action

    Change the default firewall action for an address

    Definition:
        api.modify_firewall_default(address inet, action boolean)

    Arguments:
        address - The address to alter
        action - TRUE for block all traffic, FALSE for allow all traffic

    Returns:
        void

    Rules:
        Cannot remove a default action, only modify

    Example:
        SELECT api.modify_firewall_default('10.0.0.1',TRUE);