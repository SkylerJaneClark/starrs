-------------------------------------------------------------------------------
3.4 IP (Network address resources)
-------------------------------------------------------------------------------

3.4.1 Overview

    The most critical resource in any network is its addresses. A single 
    network can be comprised of many subnets, each of different sizes 
    containing any number of addresses. With the introduction of IPv6 
    in modern networks, this address space gets even harder to manage
    
    IMPULSE has full support for both IPv4 and IPv6 addressing for hosts. 
    To aid in the management of these spaces, ranges of addresses with certain 
    uses can provide for easy catagorization of hosts on the network. 
    
3.4.2 Organization

    Individual addresses must be contained within a subnet. Subnets are what 
    define what resources this application has control over. When a subnet 
    is created, a table is populated with all possible IP addresses within 
    that subnet. All possible in this case means all except a few ones that 
    might cause issues if devices are not programmed well. Better to just 
    avoid the complications alltogether. After autopopulation, all addresess
    are given a default firewall action from the site configuration. 
    
    IPv6 subnets can take a long time, and as such autoconf addresses are 
    not usually a part of the table. These are created when the 
    interface_address is assigned. No direct interaction between the user and 
    the IP addresses table is allowed to occur. 
    
3.4.3 Functions

3.4.3.1 Create subnet

    Create a new subnet to manage

    Definition:
        api.create_subnet(subnet cidr, name text, comment text, 
        autogen boolean, dhcp_enable boolean)

    Arguments:
        subnet - The subnet in CIDR notation
        name - The name of this subnet
        comment - A comment on the subnet (or NULL for no comment)
        autogen - Autopopulate the IP addresses table (advanced use only)
        dhcp_enable - TRUE to allow this subnet for DHCP, FALSE for not

    Rules:
        Subnets must be unique (primary key)
        No nested subnets (trigger)

    Example:
        SELECT api.create_subnet('10.0.0.0/24','Servers','All servers',
        TRUE,TRUE);
        
3.4.3.2 Remove Subnet

    Remove a subnet from the network

    Definition:
        api.remove_subnet(subnet cidr)

    Arguments:
        subnet - The subnet to remove in CIDR notation

    Rules:
        No addresses can be inuse if Autogen was enabled (trigger)

    Example:
        SELECT api.remove_subnet('10.0.0.0/24');

3.4.3.3 Create IP Range

    Create a range of addresses

    Definition:
        api.create_ip_range(name text, first_ip inet, last_ip inet, 
        subnet cidr, use varchar(4), comment text)

    Arguments:
        name - The name of the range
        first_ip - The first IP address of the range
        last_ip - The last IP address of the range
        subnet - The subnet containing the range
        use - A use (see documentation for uses)
        comment - A comment on the range (or NULL for no comment)

    Rules:
        No overlapping ranges (trigger)

    Example:
        SELECT api.create_ip_range('Rack 1','10.0.0.1','10.0.0.20',
        '10.0.0.0/24','UREG','All rack 1 machines');

3.4.3.4 Remove IP Range

    Remove an IP range from the database

    Definition:
        api.remove_ip_range(name text)

    Arguments:
        name - Name of the range to remove

    Rules:
        None

    Example:
        SELECT api.remove_ip_range('Rack 1');

3.4.3.5 Get Address from Range

    Given a range, return the first available IP address within that range

    Definition:
        api.get_address_from_range(range_name text)

    Arguments:
        range_name - Name of the range to obtain an address from

    Rules:
        None

    Example:
        SELECT pi.get_address_from_range('Rack 1');

3.4.3.6 Get Subnet Addresses

    Get a list of all allowed addresses within a subnet

    Definition:
        api.get_subnet_addresses(CIDR)

    Arguments:
        $1 - Subnet to parse

    Rules:
        None

    Example:
        SELECT api.get_subnet_addresses('10.0.0.0/24');
        
3.4.3.7 Get Range Addresses

    Get a list of all addresses within a range of addresses
    
    Definition:
        api.get_range_addresses(INET,INET)
        
    Arguments:
        $1 - First address of the range
        $2 - Last address of the range
        
    Rules:
        None
        
    Example:
        SELECT api.get_range_addresses('2001:db0::1','2001:db0::ff');
        
3.4.3.8 Create Address Range

    Create all addresses within a range for a non-autogenerating subnet. The 
    intention is to use this with DHCPv6 subnets since IPv6 can have millions 
    of addresses.
    
    Definition:
        api.create_address_range(input_first_ip inet, input_last_ip inet, 
        input_subnet cidr)
        
    Arguments:
        input_first_ip - First address of the range
        input_last_ip - Last address of the range
        input_subnet - Subnet containign the range
        
    Rules:
        Addresses must be within the subnet
        Subnet must not be autogenerated
        
    Example:
        SELECT api.create_address_range('2001:db0::1','2001:db0::ff',
        '2001:db0::/64');