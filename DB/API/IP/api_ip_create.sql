/* API - create_subnet
	1) Check privileges
	2) Validate input
	3) Create RDNS zone (since for this purpose you are authoritative for that zone)
	4) Create new subnet
*/
CREATE OR REPLACE FUNCTION "api"."create_subnet"(input_subnet cidr, input_name text, input_comment text, input_autogen boolean, input_dhcp boolean, input_zone text, input_owner text) RETURNS VOID AS $$
	DECLARE
		RowCount INTEGER;
	BEGIN
		PERFORM api.create_log_entry('API', 'DEBUG', 'Begin api.create_subnet');

		-- Validate input
		input_name := api.validate_name(input_name);
		
		-- Fill in owner
		IF input_owner IS NULL THEN
			input_owner := api.get_current_user();
		END IF;
		
		-- Fill in zone
		IF input_zone IS NULL THEN
			input_zone := api.get_site_configuration('DNS_DEFAULT_ZONE');
		END IF;
		
		-- Create new subnet
		PERFORM api.create_log_entry('API', 'INFO', 'creating new subnet');
		INSERT INTO "ip"."subnets" 
			("subnet","name","comment","autogen","owner","dhcp_enable","zone") VALUES
			(input_subnet,input_name,input_comment,input_autogen,input_owner,input_dhcp,input_zone);

		-- Create RDNS zone
		PERFORM api.create_log_entry('API','INFO','creating reverse zone for subnet');
		PERFORM api.create_dns_zone(api.get_reverse_domain(input_subnet),api.get_site_configuration('DNS_DEFAULT_KEY'),FALSE,'Reverse zone for subnet '||text(input_subnet),input_owner);

		PERFORM api.create_log_entry('API', 'DEBUG', 'Finish api.create_subnet');
	END;
$$ LANGUAGE 'plpgsql';
COMMENT ON FUNCTION "api"."create_subnet"(cidr, text, text, boolean, boolean, text, text) IS 'Create/activate a new subnet';

/* API - create_ip_range
	1) Check privileges
	2) Validate input
	3) Create new range (triggers checking to make sure the range is valid
*/
CREATE OR REPLACE FUNCTION "api"."create_ip_range"(input_name text, input_first_ip inet, input_last_ip inet, input_subnet cidr, input_use varchar(4), input_comment text) RETURNS VOID AS $$
	BEGIN
		PERFORM api.create_log_entry('API', 'DEBUG', 'Begin api.create_ip_range');

		-- Validate input
		input_name := api.validate_name(input_name);
		
		-- Create new IP range		
		PERFORM api.create_log_entry('API', 'INFO', 'creating new range');
		INSERT INTO "ip"."ranges" ("name", "first_ip", "last_ip", "subnet", "use", "comment") VALUES 
		(input_name,input_first_ip,input_last_ip,input_subnet,input_use,input_comment);

		PERFORM api.create_log_entry('API', 'DEBUG', 'Finish api.create_ip_range');
	END;
$$ LANGUAGE 'plpgsql';
COMMENT ON FUNCTION "api"."create_ip_range"(text, inet, inet, cidr, varchar(4), text) IS 'Create a new range of IP addresses';

/* API - create_address_range
	1) Check if subnet exists
	2) Check if addresses are within subnet
	3) Check if the subnet was autogenerated
	4) Get the owner of the subnet
	5) Create addresses
*/
CREATE OR REPLACE FUNCTION "api"."create_address_range"(input_first_ip inet, input_last_ip inet, input_subnet cidr) RETURNS VOID AS $$
	DECLARE
		RowCount INTEGER;
		Owner TEXT;
		RangeAddresses RECORD;
	BEGIN
		-- Check if subnet exists
		SELECT COUNT(*) INTO RowCount
		FROM "ip"."subnets"
		WHERE "ip"."subnets"."subnet" = input_subnet;
		IF (RowCount < 1) THEN
			RAISE EXCEPTION 'Subnet (%) does not exist.',input_subnet;
		END IF;
		
		-- Check if addresses are within subnet
		IF NOT input_first_ip << input_subnet THEN
			RAISE EXCEPTION 'First address (%) not within subnet (%)',input_first_ip,input_subnet;
		END IF;

		IF NOT input_last_ip << input_subnet THEN
			RAISE EXCEPTION 'Last address (%) not within subnet (%)',input_last_ip,input_subnet;
		END IF;

		-- Check if autogen'd
		IF (SELECT "autogen" FROM "ip"."subnets" WHERE "ip"."subnets"."subnet" = input_subnet LIMIT 1) IS TRUE THEN
			RAISE EXCEPTION 'Subnet (%) addresses were autogenerated. Cannot create new addresses.',input_subnet;
		END IF;

		-- Get owner
		SELECT "ip"."subnets"."owner" INTO Owner 
		FROM "ip"."subnets"
		WHERE "ip"."subnets"."subnet" = input_subnet;

		-- Create addresses
		FOR RangeAddresses IN SELECT api.get_range_addresses(input_first_ip,input_last_ip) LOOP
			--RAISE INFO '% %',RangeAddresses.get_range_addresses,Owner;
			INSERT INTO "ip"."addresses" ("address","owner") VALUES (RangeAddresses.get_range_addresses,Owner);
			INSERT INTO "firewall"."defaults" ("address", "deny") VALUES (RangeAddresses.get_range_addresses, DEFAULT);
		END LOOP;
	END;
$$ LANGUAGE 'plpgsql';
COMMENT ON FUNCTION "api"."create_address_range"(inet, inet, cidr) IS 'Create a range of addresses from a non-autogened subnet (intended for DHCPv6)';
