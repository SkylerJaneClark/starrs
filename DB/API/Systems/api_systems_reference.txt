-------------------------------------------------------------------------------
3.7 Systems (User machine data)
-------------------------------------------------------------------------------

3.7.1 Overview

    System data is the core of the user controlled data in this application. 
    A system is defined as a sngle computer box. Since computers often have 
    multiple network interfaces, the ability to do this has been a core 
    feature of IMPULSE. 

    An interface is defined as a single device physically connected to the 
    network. It is identified by the MAC address. If anyone spoofs their MAC 
    address, find a stick and beat them with it.

3.7.2 Process Flow

    1) Create a system
    2) Create one or more interfaces on that system
    3) Associate one or more addresses with each interface

3.7.3 Advanced IP Concepts

3.7.3.1 IPv4

    IPv4 addressing allowed for "aliases". An alias is another IP address 
    on a shared MAC address. So for example, the interface has addresses 
    '10.0.0.1', '10.0.0.2', '10.0.0.3'. Each respectively corresponds 
    (in Linux), to 'eth0','eth0:1','eth0:2', etc. As such it is required 
    to name your alias addresses something similar to the primary. 

3.7.3.2 IPv6

    IPv6 employes the concept of Secondary addresses, which are similar to 
    IPv4 aliases. They differ in that secondaries are assigned to the 
    interface and not to a "sub-interface". For example, eth0:1 will never 
    occur in IPv6. 

3.7.4 Functions

3.7.4.1 Create System

    Register a new system on the network. There was discussion of allowing 
    multiple operating systems to be associated, however this feature was 
    removed due to unncessesary complexity. 

    Definition:
        api.create_system(system_name text, owner text, type text, 
        os_name text, comment text)

    Arguments:
        system_name - Name of the system
        owner - Owning user (NULL for current authenticated user)
        type - Server, Desktop, Laptop, etc
        os_name - Primary operating system
        comment - Comment on the system (or NULL for no comment)

    Returns:
        void

    Rules:
        System names must be unique (primary key)

    Example:
        SELECT api.create_system('Server1',NULL,'Server',
        'Windows Server 2003','Windows webserver');

3.7.4.2 Create Interface

    Create an interface on a system

    Definition:
        api.create_interface(system_name text, mac macaddr, comment text)

    Arguments:
        system_name - Name of the system to create the interface on
        mac - MAC address of the interface
        comment - Comment on the interface (or NULL for no comment)

    Returns:
        void

    Rules:
        MAC addresses must be unique (primary key)

    Example:
        SELECT api.create_interface('Server1','00:09:6b:12:34:56',NULL);

3.7.4.3 Create Interface Address

    Associate an address with an interface by specifying the IP address

    Definition:
        api.create_interface_address_manual(mac macaddr, name text, 
        address inet, config text, class text, isprimary boolean, 
        comment text)

    Arguments:
        mac - MAC address to associate with
        name - Name of the interface
        address - Address to register
        config - Configuration type of the address
        class - Class of the configuration (or NULL for default)
        isprimary - Is this address the primary of the interface
        comment - Comment on the address (or NULL for no comment)

    Returns:
        void

    Rules:
        Only one primary address per MAC (trigger)
        Config type must match address family (trigger)

    Example:
        SELECT pi.create_interface_address_manual('00:09:6b:12:34:56', 
        'Local Area Connection','10.0.0.1','DHCP',NULL,TRUE,'Main network');

3.7.4.4 Remove System

    Remove a system (and all associated records)

    Definition:
        api.remove_system(system_name text)

    Arguments:
        system_name - The name of the system to remove

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_system('Server1');

3.7.4.5 Remove Interface

    Remove an interface from a system

    Definition: 
        api.remove_interface(mac macaddr)

    Arguments:
        mac - MAC address of the interface

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_interface('00:09:6b:12:34:56');

3.7.4.6 Remove Interface Address

    Remove an associated address from an interface

    Definition:
        api.remove_interface_address(address inet)

    Arguments:
        address - IP address to deregister

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_interface_address('10.0.0.1');

3.7.4.7 Get System Types

    Get a list of all the available system types

    Definition:
        api.get_system_types()

    Arguments:
        None

    Returns:
        SetOf text

    Rules:
        None

    Example:
        SELECT api.get_system_types();


3.7.4.8 Get Operating Systems

    Get a list of all available operating systems

    Definition:
        api.get_operating_systems()

    Arguments:
        None

    Returns:
        SetOf text

    Rules:
        None

    Example:
        SELECT api.get_operating_systems();

3.7.4.9 Get Interface Address Owner

    Simplification function to get the owner of the address. 

    Definition:
        api.get_interface_address_owner(address inet)

    Arguments:
        address - Interface address to get the owner of

    Returns:
        text

    Rules:
        none

    Example:
        SELECT api.get_interface_address_owner('10.0.0.1');