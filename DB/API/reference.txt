IMPULSE - Official Documentation                                    Grant Cohoe
Version 1.0                                              Computer Science House
June XX, 2011                                 Rochester Institute of Technology


                              API Reference Guide

Status of this Memo

    This document is to serve as a reference guide to the API functions of 
    the IMPULSE software. All interactions with the application should 
    occur with the specified functions. 
    
Copyright Notice

    The IMPULSE development team doesn't care who uses their software. Just 
    don't expect a whole lot of help if it breaks.

Table of Contents (line number)

    1. Abstract . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
    2. Conventions  . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
    3. Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . XX
      3.1 DHCP  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
      3.2 DNS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
      3.3 Firewall  . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
      3.4 IP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . XX
      3.5 Management  . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
      3.6 Network . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
      3.7 Systems  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . XX
	4. Function Quick Index . . . . . . . . . . . . . . . . . . . . . . . .  XX
    5. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . . . . XX
    6. References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
    7. Contacts  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . XX
    
    
    
    

    
    
    









    
Cohoe                     IMPULSE - API Reference                      [Page 1]



API Reference Guide                IMPULSE                            June 2011

3.1 DHCP (Stateful configuration of addresses)

3.1.1 Overview

    Hosts on the network can receive their address configuration in multiple 
    ways. The information contained in this schema provides the underlying 
    framework for establishing how IP resources are distributed. 

    Stateful configuration is the process of a server handing a client it's 
    infomation. This is the most common method of configuring machines on a 
    network, as it is very easy to push out a variety of configuration 
    directives to a host, a class of hosts, or subnets. 

    Stateless configuration is when a client determines its network address 
    information from what is sees in the broadcast traffic. Stateless 
    autoconfiguration was implemented in IPv4 with 169.254.0.0 addresses, 
    commonly perceived to occur when your network DHCP server is not 
    operational. Stateless Autoconfiguration is an integral part of IPv6 and 
    is thus supported in this application.

3.1.2 Objects

3.1.2.1 Configuration Types

    This application (by default) supports the following methods of 
    configuration for IP addresses:

    Static - Hosts are configured manually (IPv4 or IPv6)
    DHCP - Hosts obtain IPv4-specific configuration information from a server
    DHCPv6 - Hosts obtain IPv6-specific configuration information from a server
    Autoconf - IPv6 stateless autoconfiguration with Neighbor Discovery

3.1.2.2 Classes

    DHCP options can be delivered to certain groups of hosts, referred to as 
    classes. A common use of classes is the enabling of a PXE netboot server on 
    a network. You don't want every single host to pick up the directive to 
    boot to the PXE server, so you can specify a group (class) of hosts to do 
    so instead. This allows for different groups of hosts to have unique 
    options within the shared network.

3.1.2.3 Options

    DHCP classes and subnets can be configured with options. These options are 
    interpreted by the DHCP server through a configuration file. Note that this 
    application does not verify if the option you pass to it is valid. Check 
    the system logs to make sure the server started correctly.

Cohoe                     IMPULSE - API Reference                      [Page X]



API Reference Guide                IMPULSE                            June 2011

3.1.3 Functions
        
3.1.3.1 Create DHCP Class

    Create a new DHCP class in the database

    Definition:
        api.create_dhcp_class(class text, comment text)
        
    Arguments:
        class - The name of the class to be created
        comment - A comment on the class (or NULL for no comment)

    Rules:
        No two classes can have the same name (primary key)
        
    Example:
        SELECT api.create_dhcp_class('netboot','Anthonys boot server project');
    
3.1.3.2 Remove DHCP Class

    Remove a DHCP class from the database

    Definition:
        api.remove_dhcp_class(class text)
        
    Arguments:
        class - The name of the class to be removed

    Rules:
        None

    Example:
        SELECT api.remove_dhcp_class('netboot');

        
        
        
        
        
        
        
        
        
        
        
        
        
Cohoe                     IMPULSE - API Reference                      [Page X]



API Reference Guide                IMPULSE                            June 2011

3.1.3.3 Create DHCP Class Option

    Assign an option to a given DHCP class

    Definition:
        api.create_dhcp_class_option(class text, option text, value text)
        
    Arguments:
        class - The name of the class to assign to
        option - The option declaration to insert
        value - The value of the option

    Rules:
        Only one combination of class, option, value may exist (primary key)
        
    Example:
        SELECT api.create_dhcp_class_option('netboot','next-server',
        '"10.0.0.1"');

3.1.3.4 Remove DHCP Class Option

    Remove a configured class option from the database

    Definition:
        api.remove_dhcp_class_option(class text, option text, value text)
        
    Arguments:
        class - The name of the class
        option - The option declaration to remove
        value - The value of the option to remove
        
    Rules:
        None
        
    Example:
        SELECT api.remove_dhcp_class_option('netboot','next-server',
        '"10.0.0.1"');

        
        
        
        
        
        
        
        
        
        
        
        
Cohoe                     IMPULSE - API Reference                      [Page X]



API Reference Guide                IMPULSE                            June 2011

3.1.3.5 Create DHCP Subnet Option

    Assign a DHCP option to a subnet. Useful for routers, DNS servers, etc

    Definition:
        api.create_dhcp_subnet_option(subnet cidr, option text, value text)

    Arguments:
        subnet - The subnet to assign the option to
        option - The option declaration to insert
        value - The value of the option

    Rules:
        Only one combination of subnet, option, value may exist (primary key)
 
    Example:
        SELECT api.create_dhcp_class_option('10.0.0.0/24','option-routers',
        '"10.0.0.254"');


3.1.3.6 Remove DHCP Subnet Option

    Remove a configured subnet option from the database

    Definition:
        api.remove_dhcp_subnet_option(subnet cidr, option text, value text)

    Arguments:
        subnet - The subnet to remove the option/value from
        option - The option declaration to remove
        value - The value of the option to remove
        
    Rules:
        None
        
    Example:
        SELECT api.remove_dhcp_subnet_option('10.0.0.0/24','option-routers',
        '"10.0.0.254"');

        
        
        
        
        
        
        
        
        
        
        
Cohoe                     IMPULSE - API Reference                      [Page X]



API Reference Guide                IMPULSE                            June 2011

2. DNS (Domain name resolution and records)

api.create_dns_key(keyname text, key text, comment text)
api.remove_dns_key(keyname text)
api.create_dns_zone(zone text, keyname text, forward boolean, comment text)
api.remove_dns_zone(zone text)
api.create_dns_address(address inet, hostname text, zone text, ttl integer, owner text)
api.remove_dns_address(address inet)
api.create_mailserver(hostname text, domain text, preference integer, ttl integer)
api.remove_mailserver(hostname text, domain text)
api.get_reverse_domain(INET)
api.create_nameserver(hostname text, domain text, isprimary boolean, ttl integer)
api.remove_nameserver(hostname text, domain text)
api.create_dns_srv(alias text, target text, zone text, priority integer, weight integer, port integer, ttl integer)
api.remove_dns_srv(alias text, target text, zone text)
api.create_dns_cname(alias text, target text, zone text, ttl integer)
api.remove_dns_cname(alias text, target text, zone text)
api.create_dns_txt(hostname text, zone text, text text, type text, ttl integer)
api.remove_dns_txt(hostname text, zone text, type text)

3. Firewall (Access control from the outside world)

api.create_firewall_metahost_member(address inet, metahost text)
api.remove_firewall_metahost_member(address inet)
api.modify_firewall_default(address inet, action boolean)
api.create_metahost(name text, comment text)
api.remove_metahost(name text)
api.create_metahost_rule(name text, port integer, transport text, deny boolean, comment text)
api.remove_metahost_rule(name text, port integer, transport text)
api.create_firewall_system(name text, subnet cidr, software text)
api.remove_firewall_system(name text)
api.create_firewall_rule(address inet, port integer, transport text, deny boolean, comment text)
api.remove_firewall_rule(address inet, port integer, transport text)

4. IP (Network address resources)

api.create_subnet(subnet cidr, name text, comment text, autogen boolean)
api.remove_subnet(subnet cidr)
api.create_ip_range(name text, first_ip inet, last_ip inet, subnet cidr, use varchar(4), comment text)
api.remove_ip_range(name text)
api.get_address_from_range(range_name text)
api.get_subnet_addresses(CIDR)

5. Management (IMPULSE confiugration and data)

api.create_log_entry(source text, severity text, message text)
api.sanitize_general(input text)
api.sanitize_dhcp(input text)
api.get_current_user()
api.validate_domain(hostname text, domain text)
api.renew_system(system_name text)
api.create_site_configuration(directive text, value text)
api.remove_site_configuration(directive text)

6. Network (Network device architecture

api.create_switchport(port_name text, system_name text, port_type text, description text)
api.remove_switchport(port_name text, system_name text)

7. Systems (User machine data)

api.create_system(system_name text, owner text, type text, os_name text, comment text)
api.remove_system(system_name text)
api.create_interface(system_name text, mac macaddr, comment text)
api.remove_interface(mac macaddr)
api.create_interface_address_manual(mac macaddr, name text, address inet, config text, class text, isprimary boolean, comment text)
api.create_interface_address_auto(mac macaddr, name text, range_name text, config text, class text, isprimary boolean, comment text)
api.remove_interface_address(address inet)