IMPULSE - Official Documentation                                    Grant Cohoe
Version 1.0                                              Computer Science House
June XX, 2011                                 Rochester Institute of Technology


                              API Reference Guide

Status of this Memo

    This document is to serve as a reference guide to the API functions of 
    the IMPULSE software. All interactions with the application should 
    occur with the specified functions. 
    
Copyright Notice

    The IMPULSE development team doesn't care who uses their software. Just 
    don't expect a whole lot of help if it breaks.

Table of Contents (line number)

    1. Abstract . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
    2. Conventions . . . . . . . . . . . . . . . . . . . . . . . . . . . .   XX
    3. Functions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
      3.1 DHCP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   XX
      3.2 DNS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
      3.3 Firewall . . . . . . . . . . . . . . . . . . . . . . . . . . . .   XX
      3.4 IP  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
      3.5 Management . . . . . . . . . . . . . . . . . . . . . . . . . . .   XX
      3.6 Network . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
      3.7 Systems  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . XX
    4. Function Quick Index . . . . . . . . . . . . . . . . . . . . . . . .  XX
    5. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . . . . XX
    6. References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
    7. Contacts  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . XX


-------------------------------------------------------------------------------
1. Abstract
-------------------------------------------------------------------------------

1.1 Project Origin

    IMPULSE came about as a result of the growing need to replace the machine 
    registration system of the Computer Science House, called Start. Written 
    by user Joe Sunday (sunday) Start has served our needs very well. However 
    lately there have been a few issues with things breaking over the years, 
    and a lack of IPv6 support has caused many other members to attempt to 
    it. However all previous attempts have failed due to lack of interest, 
    failure to understand the complexity of all requirements, and a general 
    pessimistic attitude. 
    
    To avoid these complications, IMPULSE was developed in secret with only 
    a few select people knowing of its existance. Being on co-op with 
    Anheuser-Busch in Baldwinsville NY, I had a lot more time available to 
    work on this project. The people brought on board to help were people I 
    trusted to be able to complete their tasks by a given deadline and who 
    would take the initiative to help out when needed. 
    
    If all goes according to plan, IMPULSE will be released to the CSH public 
    the first week of 2011-1. 
    
    Grant Cohoe
    Project Lead - IMPULSE
    
1.2 Project Design

    Previous incarnations and attempts at this project have usually revolved 
    around a complication web application and a moderately simple database 
    backend. This is perfect acceptable in that it keeps the communication to 
    the backend database to a minimum. 
    
    IMPULSE goes about this a completely different way. To provide for easy 
    access by potential clients across multiple operating systems, interfaces, 
    and other applications, IMPULSE is designed to remove all thought from 
    the client. All core logic and functions exist within the database. 
    This allows for clients to be very simple and dumb, letting the backend 
    handle all data validation, rules, and backend processes. 
    
    This is accomplished with the advanced features of PostgreSQL, an open-
    source RDBMS with a lot of cool stuff. Most notably, the INET and CIDR 
    datatypes. This allows for easy manipulation of IP address data without 
    having to write custom functions. It's ability to also have functions 
    written in other languages is also vital to our success. For example, 
    Postgres functions can be written in Perl, and take advantage of 
    everything that Perl can offer. So in a nutshell, you can have Perl 
    in your database. How cool is that?
    
1.3 Client Interaction

    Client can interact with the database via a set of API functions. These 
    functions handle all interaction in and out of the application, and 
    provide a standard set of instructions across any client. This ensures 
    that everyone is getting the same data, and there are no large queries 
    from the clients. 
    
1.4 Official Clients

    The following clients are officially "supported":
    
    1) Desktop Web - all features, all information
    2) Mobile Web - Critical features, most information
    3) Command Line - all features, all information

-------------------------------------------------------------------------------
2. Conventions
-------------------------------------------------------------------------------

2.1 SQL Syntax

    Clients should execute queries in the following format:

        SELECT schema.function();
    
    The inclusion of the schema is critical since all functions are 
    catagorized into the appropriate schemas. The default search path is set 
    to "public", which contains nothing.
    
2.2 Arguments

    Certain arguments can be NULL, which will trigger either a default value 
    or some other function to occur. NULL should be placed in the function 
    without any ' or " marks around it. 
    
        SELECT schema.function('regular_arg',NULL);
        
    There is a difference between " and ' marks. Quotation marks (") are used 
    to identify schemas, tables, and columns. Single quote marks (') are used 
    for strings. 
    

2.3 Information Retreval

    All information is provided in Views. A Postgres View is a template for 
    information that you can easy get. It can be made up of a very complex 
    SQL query, but referenced in a single word. For example, the query
    
        SELECT * FROM "public"."table1" 
            JOIN "private"."table5" ON
            "public"."table1"."index" = 
            "private"."table5"."index"
            ORDER BY "private"."table5"."value"
            LIMIT 1 DESC;
            
    This query can be made into a view, which would then look like:
    
        SELECT * FROM "public"."myview";
        
    Same information, much easier to work with in your application.
    
    You can specify certain columns to select to make your query perform more 
    optimal. This applies to both Views and Tables. 
    
        SELECT "index","value","comment" FROM "public"."myview";
        
-------------------------------------------------------------------------------
3. Functions
-------------------------------------------------------------------------------

    All of the API functions are provided in the API schema. This is the only 
    way you should interact with this application. While there is no 
    technical enforcement, it is how this application was intended to 
    function. Not using the API functions can lead to incorrect or incomplete 
    data being entered. 
    
    Functions are broken down into the schemas they affect. The schemas in 
    this application are:
    
        1) DHCP
        2) DNS
        3) Firewall
        4) IP
        5) Management
        6) Network
        7) Systems

-------------------------------------------------------------------------------
3.1 DHCP (Stateful configuration of addresses)
-------------------------------------------------------------------------------

3.1.1 Overview

    Hosts on the network can receive their address configuration in multiple 
    ways. The information contained in this schema provides the underlying 
    framework for establishing how IP resources are distributed. 

    Stateful configuration is the process of a server handing a client it's 
    infomation. This is the most common method of configuring machines on a 
    network, as it is very easy to push out a variety of configuration 
    directives to a host, a class of hosts, or subnets. 

    Stateless configuration is when a client determines its network address 
    information from what is sees in the broadcast traffic. Stateless 
    autoconfiguration was implemented in IPv4 with 169.254.0.0 addresses, 
    commonly perceived to occur when your network DHCP server is not 
    operational. Stateless Autoconfiguration is an integral part of IPv6 and 
    is thus supported in this application.

3.1.2 Objects

3.1.2.1 Configuration Types

    This application (by default) supports the following methods of 
    configuration for IP addresses:

    Static - Hosts are configured manually (IPv4 or IPv6)
    DHCP - Hosts obtain IPv4-specific configuration information from a server
    DHCPv6 - Hosts obtain IPv6-specific configuration information from a server
    Autoconf - IPv6 stateless autoconfiguration with Neighbor Discovery

3.1.2.2 Classes

    DHCP options can be delivered to certain groups of hosts, referred to as 
    classes. A common use of classes is the enabling of a PXE netboot server on 
    a network. You don't want every single host to pick up the directive to 
    boot to the PXE server, so you can specify a group (class) of hosts to do 
    so instead. This allows for different groups of hosts to have unique 
    options within the shared network.

3.1.2.3 Options

    DHCP classes and subnets can be configured with options. These options are 
    interpreted by the DHCP server through a configuration file. Note that this 
    application does not verify if the option you pass to it is valid. Check 
    the system logs to make sure the server started correctly.

3.1.3 Functions
        
3.1.3.1 Create DHCP Class

    Create a new DHCP class in the database

    Definition:
        api.create_dhcp_class(class text, comment text)
        
    Arguments:
        class - The name of the class to be created
        comment - A comment on the class (or NULL for no comment)

    Rules:
        No two classes can have the same name (primary key)
        
    Example:
        SELECT api.create_dhcp_class('netboot','Anthonys boot server project');
    
3.1.3.2 Remove DHCP Class

    Remove a DHCP class from the database

    Definition:
        api.remove_dhcp_class(class text)
        
    Arguments:
        class - The name of the class to be removed

    Rules:
        None

    Example:
        SELECT api.remove_dhcp_class('netboot');

3.1.3.3 Create DHCP Class Option

    Assign an option to a given DHCP class

    Definition:
        api.create_dhcp_class_option(class text, option text, value text)
        
    Arguments:
        class - The name of the class to assign to
        option - The option declaration to insert
        value - The value of the option

    Rules:
        Only one combination of class, option, value may exist (primary key)
        
    Example:
        SELECT api.create_dhcp_class_option('netboot','next-server',
        '"10.0.0.1"');

3.1.3.4 Remove DHCP Class Option

    Remove a configured class option from the database

    Definition:
        api.remove_dhcp_class_option(class text, option text, value text)
        
    Arguments:
        class - The name of the class
        option - The option declaration to remove
        value - The value of the option to remove
        
    Rules:
        None
        
    Example:
        SELECT api.remove_dhcp_class_option('netboot','next-server',
        '"10.0.0.1"');

3.1.3.5 Create DHCP Subnet Option

    Assign a DHCP option to a subnet. Useful for routers, DNS servers, etc

    Definition:
        api.create_dhcp_subnet_option(subnet cidr, option text, value text)

    Arguments:
        subnet - The subnet to assign the option to
        option - The option declaration to insert
        value - The value of the option

    Rules:
        Only one combination of subnet, option, value may exist (primary key)
 
    Example:
        SELECT api.create_dhcp_class_option('10.0.0.0/24','option-routers',
        '"10.0.0.254"');


3.1.3.6 Remove DHCP Subnet Option

    Remove a configured subnet option from the database

    Definition:
        api.remove_dhcp_subnet_option(subnet cidr, option text, value text)

    Arguments:
        subnet - The subnet to remove the option/value from
        option - The option declaration to remove
        value - The value of the option to remove
        
    Rules:
        None
        
    Example:
        SELECT api.remove_dhcp_subnet_option('10.0.0.0/24','option-routers',
        '"10.0.0.254"');

-------------------------------------------------------------------------------
3.2 DNS (Domain name resolution and records)
-------------------------------------------------------------------------------

3.2.1 Overview

    DNS records are more than just names. They can point to services, and help
    maintain uptime by having backup service machines on the network. 
    IMPULSE was designed to interface with the BIND DNS server to provide all 
    common record types for a number of different domains. 

3.2.2 Record Types

    IMPULSE has the ability to maintain the following records:
    
    A - IPv4 address
    AAAA - IPv6 address
    TXT - Textual information about a host
    SPF - Textual information about a host
    MX - Mail server
    NS - Name server (DNS server)
    SRV - Service record
    CNAME - Alias to another A or AAAA
    
    There are various rules in effect governing what records can be created 
    in a given zone. This is to ensure no funky DNS shenanigans and other 
    bad practices.
    
    1) A single hostname can only have one A and/or one AAAA record
    2) There may only be one TXT or SPF record per hostname
    3) No two MX records can have the same preference in the same zone
    4) Only one NS may be elected the Primary NS of a zone
    5) Records in IMPULSE cannot traverse zones

3.2.3 Terminology

    Throughout this application, the terms "domain" and "zone" are used 
    interchangably. However they mean the same thing. Zone is frequently 
    used in the configuration of the DNS server, whily domain is frequently 
    used in outside applications and internet terminology. 

    Zones may be updated via the 'nsupdate' utility, however to prevent 
    just anyone from updating, DNS Keys are used. These are strings of 
    characters that are used to authenticate to a DNS server to allow 
    dynamic updates to occur. Each zone has one key that allows access. 

3.2.4 Functions

3.2.4.1 Create DNS Key

    Create a new DNS key. 

    Definition:
        api.create_dns_key(keyname text, key text, comment text)
        
    Arguments:
        keyname - The name of the key to create
        key - The string that is the key
        comment - A comment on the key (or NULL for no comment)

    Rules:
        Key names must be unique (primary key)
        
    Example:
        SELECT api.create_dns_key('example_key','oi0idf0sajfke9ur93',
        'example.com zone key');

3.2.4.2 Remove DNS Key

    Remove a DNS key from use

    Definition:
        api.remove_dns_key(keyname text)
        
    Arguments:
        keyname - The name of the key to remove
        
    Rules:
        None
        
    Example:
        SELECT api.remove_dns_key('example_key');
    
3.2.4.3 Create DNS Zone

    Create a new DNS zone
    
    Definition:
        api.create_dns_zone(zone text, keyname text, forward boolean, 
        comment text)

    Arguments:
        zone - The domain to create
        keyname - The DNS key to use for updates
        forward - Is this a forward or reverse zone
        comment - A comment on the zone (or NULL for no comment)
        
    Rules:
        Zone names must be unique (primary key)
        Keyname must exist in "dns"."keys" (foreign key)
        
    Example:
        EXAMPLE api.create_dns_zone('example.com','example_key',TRUE,
        'example.com domain');
    
3.2.4.4 Remove DNS Zone

    Remove a DNS zone from the database
    
    Definition:
        api.remove_dns_zone(zone text)

    Arguments:
        zone - The name of the zone to remove
        
    Rules:
        None
        
    Example:
        SELECT api.remove_dns_zone('example.com');
    
3.2.4.5 Create DNS A or AAAA Record (Resource)

    Register a new host address record
    
    Definition:
        api.create_dns_address(address inet, hostname text, zone text, 
        ttl integer, owner text)

    Arguments:
        address - The IP address of this record
        hostname - The specific hostname that owns the record
        zone - The DNS domain the record is for
        ttl - Time to Live (or NULL for the default value)
        owner - The username who owns this resource
        
    Rules:
        Only one A or AAAA record per hostname (unique)
        Addresses can have either an A or AAAA record, not both (unique)
        
    Example:
        SELECT api.create_dns_address('10.0.0.1', 'hostname', 'example.com', 
        NULL, 'john.doe');
    
3.2.4.6 Remove DNS A or AAAA Record

    Remove a host address record
    
    Definition:
        api.remove_dns_address(address inet)

    Arguments:
        address - The address of the record to remove
        
    Rules:
        None
        
    Example:
        SELECT api.remove_dns_address('10.0.0.1');
    
3.2.4.7 Create DNS Mailserver Record

    Create a new MX record for a mailserver
    
    Definition:
        api.create_mailserver(hostname text, domain text, preference integer, 
        ttl integer)

    Arguments:
        hostname - The name of the mailserver (from "dns"."a")
        domain - The domain of the record
        preference - The preference level of the record (lower is more)
        ttl - Time to Live (or NULL for default)
        
    Rules:
        No two records in a zone can have the same preference (unique)
        
    Example:
        SELECT api.create_mailserver('mail','example.com',10,36500);
    
3.2.4.8 Remove DNS Mailserver Record

    Remove a MX record for a mailserver
    
    Definition:
        api.remove_mailserver(hostname text, domain text)
        
    Arguments:
        hostname - The name of the mailserver
        domain - The zone of the record
        
    Rules:
        None
        
    Example:
        SELECT api.remove_mailserver('mail','example.com');
    
3.2.4.9 Create DNS Nameserver Record

    Creata a new NS record for a nameserver
    
    Definition:
        api.create_nameserver(hostname text, domain text, isprimary boolean, 
        ttl integer)

    Arguments:
        hostname - Name of the nameserver
        domain - Zone of the record
        isprimary - Is this the primary nameserver for the zone
        ttl - Time to Live (or NULL for default)
        
    Rules:
        Only one primary NS per zone (trigger)
        
    Example:
        SELECT api.create_nameserver('ns1','example.com',TRUE,NULL);
    
3.2.4.10 Remove DNS Nameserver Record

    Remove a NS nameserver record
    
    Definition:
        api.remove_nameserver(hostname text, domain text)

    Arguments:
        hostname - The name of the nameserver
        domain - The zone of the record
        
    Rules:
        None
        
    Example:
        SELECT api.remove_nameserver('ns1','example.com');
    
3.2.4.11 Create DNS SRV Record

    Create a DNS service record. This does not provide syntax checking of 
    your record, so you must ensure that the alias behaves the way you 
    expected. 
    
    Definition:
        api.create_dns_srv(alias text, target text, zone text, 
        priority integer, weight integer, port integer, ttl integer)

    Arguments:
        alias - The name of this record
        target - The target A or AAAA of this record
        zone - The zone of this record
        priority - SRV priority (lower is more)
        weight - SRV weight (higher is more)
        port - The port of the service
        ttl - Time to Live (or NULL for default)
        
    Rules:
        Target A or AAAA must exist
        
    Example:
        SELECT api.create_dns_srv('_ldap._tcp','ldap','example.com',
        0,0,389,NULL);
    
3.2.4.12 Remove DNS SRV Record

    Remove a service record
    
    Definition:
        api.remove_dns_srv(alias text, target text, zone text)

    Arguments:
        alias - The alias of the record
        target - The target of the record
        zone - The zone of the record
        
    Rules:
        None
        
    Example:
        SELECT api.remove_dns_srv('_ldap._tcp','ldap','example.com');
    
3.2.4.13 Create DNS CNAME Record

    Create a new alias name record
    
    Definition:
        api.create_dns_cname(alias text, target text, zone text, ttl integer)

    Arguments:
        alias - The name of the new record
        target - The target of this pointer
        zone - The zone of the record
        ttl - Time to Live (or NULL for default)
        
    Rules:
        Target must exist
        
    Example:
        SELECT api.create_dns_cname('www','webserver','example.com',NULL);
    
3.2.4.14 Remove DNS CNAME Record

    Remove an alias name record
    
    Definition:
        api.remove_dns_cname(alias text, target text, zone text)

    Arguments:
        alias - The name of the record
        target - The target of the pointer
        zone - The zone of the record
        
    Rules:
        None
        
    Example:
        SELECT api.remove_dns_cname('www','webserver','example.com');
    
3.2.4.15 Create DNS TXT Record

    Create a new TXT or SPF record
    
    Definition:
        api.create_dns_txt(hostname text, zone text, text text, type text,
        ttl integer)

    Arguments:
        hostname - The hostname of the record
        zone - The zone of the record
        text - The text to be placed in the record
        type - TXT or SPF (subtle differences)
        ttl - Time to Live (or NULL for default)
        
    Rules:
        Only one TXT or SPF record per hostname (unique)
        
    Example:
        SELECT api.create_dns_txt('webserver','example.com',
        'located in a black hole','TXT',NULL);
    
3.2.4.16 Remove DNS TXT Record

    Remove a TXT or SPF record
    
    Definition:
        api.remove_dns_txt(hostname text, zone text, type text)

    Arguments:
        hostname - Hostname of the record to remove
        zone - Zone of the record
        type - Type of record to remove
        
    Rules:
        None
        
    Example:
        SELECT api.remove_dns_txt('webserver','example.com','TXT');
    
3.2.4.17 Get Reverse Domain From IP Address

    Generate the reverse DNS string from a given IP address. This uses an 
    external Perl module to easily return the reverse string.
    
    Definition:
        api.get_reverse_domain(INET);
        
    Arguments:
        INET - An IP address (either v4 or v6)
        
    Rules:
        None
        
    Example:
        SELECT api.get_reverse_domain('2001:db0::dead:beef:cafe');
    
-------------------------------------------------------------------------------
3.3 Firewall (Access control from the outside world)
-------------------------------------------------------------------------------

3.3.1 Overview

    IMPULSE allows for the management of firewall rules for configured 
    addresses. Addresses (interfaces) can have individual firewall rules 
    or be a member of a Metahost, or group of hosts. A metahost will apply 
    its rules to all members equally, thus providing for a single set of 
    rules for all devices. 

    Different firewall software packages have differences in syntax, so 
    IMPULSE tracks what firewall systems run what software to provide for the 
    proper output. 

3.3.2 Functions

3.3.2.1 Create metahost membership
    
    Assign an IP address to a metahost
    
    Definition:
        api.create_firewall_metahost_member(address inet, metahost text)
    
    Arguments:
        address - The address to assign
        metahost - The metahost name to assign the address to
    
    Rules:
        Once you are a member of a metahost, you cannot have other rules
        You can only be a member of one metahost
    
    Example:
        SELECT api.create_firewall_metahost_member('10.0.0.1','Servers');
        
3.3.2.2 Remove metahost membership
    
    Remove an address from any metahost it might be attached to
    
    Definition:
        api.remove_firewall_metahost_member(address inet)
    
    Arguments:
        address - The IP address to remove
    
    Rules:
        None
    
    Example:
        SELECT api.remove_firewall_metahost_member('10.0.0.1');
    
3.3.2.3 Modify device default action
    
    Change the default firewall action for an address
    
    Definition:
        api.modify_firewall_default(address inet, action boolean)
    
    Arguments:
        address - The address to alter
        action - TRUE for block all traffic, FALSE for allow all traffic
    
    Rules:
        Cannot remove a default action, only modify
    
    Example:
        SELECT pi.modify_firewall_default('10.0.0.1',TRUE);
    
3.3.2.4 Create metahost
    
    Create a new metahost
    
    Definition:
        api.create_metahost(name text, comment text)
    
    Arguments:
        name - The name of the metahost
        comment - A comment on the new metahost (or NULL for no comment)
    
    Rules:
        Names must be unique (primary key)
    
    Example:
        SELECT api.create_metahost('Servers','All servers on the network');
    
3.3.2.5 Remove metahost
    
    Remove a metahost from the database. This will also erase all rules 
    associated with its members.
    
    Definition:
        api.remove_metahost(name text)
    
    Arguments:
        name - The name of the metahost to remove
    
    Rules:
        None
    
    Example:
        SELECT api.remove_metahost('Servers');
    
3.3.2.6 Create metahost rule
    
    Create a new rule for a metahost to be applied to all members.
    
    Definition:
        api.create_metahost_rule(name text, port integer, transport text, 
        deny boolean, comment text)
    
    Arguments:
        name - Metahost name to apply to
        port - Port to perform the action on
        transport - TCP or UDP or BOTH
        deny - TRUE or FALSE to deny traffic
        comment - A comment on the rule
    
    Rules:
        No conflicting rules (Deny and Allow a port?) (primary key)
    
    Example:
        SELECT api.create_metahost_rule('Servers',22,'TCP',FALSE,
        'Allow SSH traffic');
    
3.3.2.7 Remove metahost rule

    Delete a metahost rule and erase all references to it.
    
    Definition:
        api.remove_metahost_rule(name text, port integer, transport text)
    
    Arguments:
        name - The metahost name this rule applied to
        port - The port of the rule
        transport - TCP or UDP or BOTH
    
    Rules:
        None
    
    Example:
        SELECT api.remove_metahost_rule('Servers',22,'TCP');
    
3.3.2.8 Create Firewall System

    Establish a system as a firewall and specify its software so the proper 
    rule syntax can be used.
    
    Definition:
        api.create_firewall_system(name text, subnet cidr, software text)
    
    Arguments:
        name - The system name of the firewall
        subnet - The subnet for which this system controls
        software - The system software
    
    Rules:
        A system may control more than 1 subnet
    
    Example:
        SELECT api.create_firewall_system('Firewall1','10.0.0.0/24',
        'Cisco IOS');
    
3.3.2.9 Remove Firewall System
    
    Delete a firewall system from the database
    
    Definition:
        api.remove_firewall_system(name text)
    
    Arguments:
        name - Name of the firewall system to remove
    
    Rules:
        None
    
    Example:
        SELECT pi.remove_firewall_system('Firewall1');
    
3.3.2.10 Create Rule
    
    Create a new standalone firewall rule
    
    Definition:
        api.create_firewall_rule(address inet, port integer, transport text, 
        deny boolean, comment text)
    
    Arguments:
        address - Address to apply the rule to
        port - Port to perform on
        transport - TCP or UDP or BOTH
        deny - TRUE to Deny traffic, FALSE to allow traffic
        comment - A comment on the rule (or NULL for no comment)
    
    Rules:
        Unique actions per port/transport (primary key)
        Cannot be a member of a metahost
    
    Example:
        SELECT api.create_firewall_rule('10.0.0.1',22,'TCP',TRUE,
        'Block SSH traffic');
    
3.3.2.11 Remove a Rule

    Erase a standalone rule
    
    Definition:
        api.remove_firewall_rule(address inet, port integer, transport text)
    
    Arguments:
        address - Address of the rule to remove
        port - Port to affect
        transport - TCP or UDP or BOTH
    
    Rules:
        None
    
    Example:
        SELECT api.remove_firewall_rule('10.0.0.1',22,'TCP');

3.3.2.12 Get Site Default Action

    Get the default action configured for the site
    
    Definition:
        api.get_firewall_site_default()
        
    Arguments:
        None
    
    Rules
        None:
        
    Example:
        SELECT api.get_firewall_site_default();
        
-------------------------------------------------------------------------------
3.4 IP (Network address resources)
-------------------------------------------------------------------------------

3.4.1 Overview

    The most critical resource in any network is its addresses. A single 
    network can be comprised of many subnets, each of different sizes 
    containing any number of addresses. With the introduction of IPv6 
    in modern networks, this address space gets even harder to manage
    
    IMPULSE has full support for both IPv4 and IPv6 addressing for hosts. 
    To aid in the management of these spaces, ranges of addresses with certain 
    uses can provide for easy catagorization of hosts on the network. 
    
3.4.2 Organization

    Individual addresses must be contained within a subnet. Subnets are what 
    define what resources this application has control over. When a subnet 
    is created, a table is populated with all possible IP addresses within 
    that subnet. All possible in this case means all except a few ones that 
    might cause issues if devices are not programmed well. Better to just 
    avoid the complications alltogether. After autopopulation, all addresess
    are given a default firewall action from the site configuration. 
    
    IPv6 subnets can take a long time, and as such autoconf addresses are 
    not usually a part of the table. These are created when the 
    interface_address is assigned. No direct interaction between the user and 
    the IP addresses table is allowed to occur. 
    
3.4.3 Functions

3.4.3.1 Create subnet

    Create a new subnet to manage

    Definition:
        api.create_subnet(subnet cidr, name text, comment text, 
        autogen boolean, dhcp_enable boolean)

    Arguments:
        subnet - The subnet in CIDR notation
        name - The name of this subnet
        comment - A comment on the subnet (or NULL for no comment)
        autogen - Autopopulate the IP addresses table (advanced use only)
        dhcp_enable - TRUE to allow this subnet for DHCP, FALSE for not

    Rules:
        Subnets must be unique (primary key)
        No nested subnets (trigger)

    Example:
        SELECT api.create_subnet('10.0.0.0/24','Servers','All servers',
        TRUE,TRUE);
        
3.4.3.2 Remove Subnet

    Remove a subnet from the network

    Definition:
        api.remove_subnet(subnet cidr)

    Arguments:
        subnet - The subnet to remove in CIDR notation

    Rules:
        No addresses can be inuse if Autogen was enabled (trigger)

    Example:
        SELECT api.remove_subnet('10.0.0.0/24');

3.4.3.3 Create IP Range

    Create a range of addresses

    Definition:
        api.create_ip_range(name text, first_ip inet, last_ip inet, 
        subnet cidr, use varchar(4), comment text)

    Arguments:
        name - The name of the range
        first_ip - The first IP address of the range
        last_ip - The last IP address of the range
        subnet - The subnet containing the range
        use - A use (see documentation for uses)
        comment - A comment on the range (or NULL for no comment)

    Rules:
        No overlapping ranges (trigger)

    Example:
        SELECT api.create_ip_range('Rack 1','10.0.0.1','10.0.0.20',
        '10.0.0.0/24','UREG','All rack 1 machines');

3.4.3.4 Remove IP Range

    Remove an IP range from the database

    Definition:
        api.remove_ip_range(name text)

    Arguments:
        name - Name of the range to remove

    Rules:
        None

    Example:
        SELECT api.remove_ip_range('Rack 1');

3.4.3.5 Get Address from Range

    Given a range, return the first available IP address within that range

    Definition:
        api.get_address_from_range(range_name text)

    Arguments:
        range_name - Name of the range to obtain an address from

    Rules:
        None

    Example:
        SELECT pi.get_address_from_range('Rack 1');

3.4.3.6 Get Subnet Addresses

    Get a list of all allowed addresses within a subnet

    Definition:
        api.get_subnet_addresses(CIDR)

    Arguments:
        $1 - Subnet to parse

    Rules:
        None

    Example:
        SELECT api.get_subnet_addresses('10.0.0.0/24');

-------------------------------------------------------------------------------
3.5 Management (IMPULSE configuration and data)
-------------------------------------------------------------------------------

3.5.1 Overview

    IMPULSE has site configuration directives that can make certain 
    configuration settings easier to manage. There are also validation 
    functions to make sure funky characters don't make it into the database 
    where they should not be. 
    
    Logging is also a feature in this application, and should be used for all 
    major events. Errors are also a useful thing to record to see what is 
    going on.
    
3.5.2 Functions

3.5.2.1 Create Log Entry

    Record an entry in the master log

    Definition:
        api.create_log_entry(source text, severity text, message text)

    Arguments:
        source - Where the message is coming from
        severity - Severity for viewing purposes
        message - The message to log

    Rules:
        None

    Example:
        SELECT api.create_log_entry('CLI','DEBUG','Doing something');

3.5.2.2 General Sanitization

    Clean up data input to protect against things like HTML injections

    Definition:
        api.sanitize_general(input text)

    Arguments:
        input - String to parse

    Rules:
        None

    Example:
        SELECT api.sanitize_general('This string has &*@!&$*#&');

3.5.2.3 Sanitize input for DHCP configuration

    Since DHCP outputs data to a text file, clean up data to ensure it is 
    valid to go in there. 

    Definition:
        api.sanitize_dhcp(input text)

    Arguments:
        input - String to parse

    Rules:
        None

    Example:
        SELECT api.sanitize_dhcp('"option here"');

3.5.2.4 Get Current User

    Get the current authenticated user (who the application thinks you are)

    Definition:
        api.get_current_user()

    Arguments:
        None

    Rules:
        None

    Example:
        SELECT api.get_current_user();

3.5.2.5 Validate DNS Domain

    Validate a DNS hostname or domain. Can take either a hostname, domain, 
    or FQDN. 

    Definition:
        api.validate_domain(hostname text, domain text)

    Arguments:
        hostname - Hostname to check (or NULL for Domain check only)
        domain - Domain to checl (or NULL for Hostname check only)

    Rules:
        Both arguments cannot be null

    Example:
        SELECT api.validate_domain('server','example.com');

3.5.2.6 Renew System

    Systems must be renewed every year or they and all their records expire 
    and are removed. 

    Definition:
        api.renew_system(system_name text)

    Arguments:
        system_name - Name of the system to renew

    Rules:
        None

    Example:
        SELECT api.renew_system('server1');

3.5.2.7 Create Site Configuration Directive

    Enter a new site configuration directive in the table

    Definition:
        api.create_site_configuration(directive text, value text)

    Arguments:
        directive - Directive to create
        value - Value to assign to the new directive

    Rules:
        No duplicate directives (primary key)

    Example:
        SELECT api.create_site_configuration('EXAMPLE_OPTION','something');

3.5.2.8 Remove Site Configuration Directive

    Remove an existing site configuration directive

    Definition: 
        api.remove_site_configuration(directive text)

    Arguments:
        directive - Directive to remove

    Rules:
        None

    Example:
        SELECT api.remove_site_configuration('EXAMPLE_OPTION');

-------------------------------------------------------------------------------
3.6 Network (Network device architecture)
-------------------------------------------------------------------------------

3.6.1 Overview

    IMPULSE was intended to offer a full view of the network, including 
    control over SNMP compatible switches. This would allow for the management 
    to easily disable problem machines and see detailed infomation to make 
    debugging easier. 
    
    Network devices can be created in IMPULSE, then have switchports 
    associated with them. These ports are then used to figure out how the 
    network is physically and logically constructed. 

3.6.2 Functions

3.6.2.1 Create Switchport

    Create a switchport on a network device
    
    Definition:
        api.create_switchport(port_name text, system_name text, 
        port_type text, description text)

    Arguments:
        port_name - Name of the port to create
        system_name - Name of the system to create the port on
        port_type - Type of port (access, uplink, trunk, etc)
        description - A description of the port

    Rules:
        Only network systems can have switchports (trigger)
        
    Example:
        SELECT api.create_switchport('Gi0/1','Head Switch','Uplink',
        'Master Uplink');

3.6.2.1 Remove Switchport

    Remove a switchport from a system
    
    Definition:
        api.remove_switchport(port_name text, system_name text)
        
    Arguments
        port_name - Name of the port to remove
        system_name - Name of the system to remove the port from
        
    Rules:
        None
        
    Example: 
        SELECT api.remove_switchport('Gi0/1','Head Switch');


-------------------------------------------------------------------------------
3.7 Systems (User machine data)
-------------------------------------------------------------------------------

3.7.1 Overview

    System data is the core of the user controlled data in this application. 
    A system is defined as a sngle computer box. Since computers often have 
    multiple network interfaces, the ability to do this has been a core 
    feature of IMPULSE. 
    
    An interface is defined as a single device physically connected to the 
    network. It is identified by the MAC address. If anyone spoofs their MAC 
    address, find a stick and beat them with it.
    
3.7.2 Process Flow

    1) Create a system
    2) Create one or more interfaces on that system
    3) Associate one or more addresses with each interface

3.7.3 Advanced IP Concepts

3.7.3.1 IPv4

    IPv4 addressing allowed for "aliases". An alias is another IP address 
    on a shared MAC address. So for example, the interface has addresses 
    '10.0.0.1', '10.0.0.2', '10.0.0.3'. Each respectively corresponds 
    (in Linux), to 'eth0','eth0:1','eth0:2', etc. As such it is required 
    to name your alias addresses something similar to the primary. 

3.7.3.2 IPv6

    IPv6 employes the concept of Secondary addresses, which are similar to 
    IPv4 aliases. They differ in that secondaries are assigned to the 
    interface and not to a "sub-interface". For example, eth0:1 will never 
    occur in IPv6. 

3.7.4 Functions

3.7.4.1 Create System

    Register a new system on the network. There was discussion of allowing 
    multiple operating systems to be associated, however this feature was 
    removed due to unncessesary complexity. 

    Definition:
        api.create_system(system_name text, owner text, type text, 
        os_name text, comment text)

    Arguments:
        system_name - Name of the system
        owner - Owning user (NULL for current authenticated user)
        type - Server, Desktop, Laptop, etc
        os_name - Primary operating system
        comment - Comment on the system (or NULL for no comment)

    Rules:
        System names must be unique (primary key)

    Example:
        SELECT api.create_system('Server1',NULL,'Server',
        'Windows Server 2003','Windows webserver');

3.7.4.2 Remove System

    Remove a system (and all associated records)

    Definition:
        api.remove_system(system_name text)

    Arguments:
        system_name - The name of the system to remove

    Rules:
        None

    Example:
        SELECT api.remove_system('Server1');

3.7.4.3 Create Interface

    Create an interface on a system

    Definition:
        api.create_interface(system_name text, mac macaddr, comment text)

    Arguments:
        system_name - Name of the system to create the interface on
        mac - MAC address of the interface
        comment - Comment on the interface (or NULL for no comment)

    Rules:
        MAC addresses must be unique (primary key)

    Example:
        SELECT api.create_interface('Server1','00:09:6b:12:34:56',NULL);

3.7.4.4 Remove Interface

    Remove an interface from a system

    Definition: 
        api.remove_interface(mac macaddr)

    Arguments:
        mac - MAC address of the interface

    Rules:
        None

    Example:
        SELECT api.remove_interface('00:09:6b:12:34:56');

3.7.4.5 Create Interface Address (manual)

    Associate an address with an interface by specifying the IP address

    Definition:
        api.create_interface_address_manual(mac macaddr, name text, 
        address inet, config text, class text, isprimary boolean, 
        comment text)

    Arguments:
        mac - MAC address to associate with
        name - Name of the interface
        address - Address to register
        config - Configuration type of the address
        class - Class of the configuration (or NULL for default)
        isprimary - Is this address the primary of the interface
        comment - Comment on the address (or NULL for no comment)

    Rules:
        Only one primary address per MAC (trigger)
        Config type must match address family (trigger)

    Example:
        SELECT pi.create_interface_address_manual('00:09:6b:12:34:56', 
        'Local Area Connection','10.0.0.1','DHCP',NULL,TRUE,'Main network');
        
3.7.4.6 Create Interface Address (auto)

    Pick an address from a given range to associate to an interface

    Definition:
        api.create_interface_address_auto(mac macaddr, name text, 
        range_name text, config text, class text, isprimary boolean, 
        comment text)

    Arguments:
        mac - MAC address to associate with
        name - Name of the interface
        range_name - Name of the address range to pull from
        config - Configuration type of the address
        class - Class of the configuration (or NULL for default)
        isprimary - Is this address the primary of the interface
        comment - Comment on the address (or NULL for no comment)

    Rules:
        Only one primary address per MAC (trigger)
        Config type must match address family (trigger)

    Example:
        SELECT pi.create_interface_address_manual('00:09:6b:12:34:56', 
        'Local Area Connection','Servers','DHCP',NULL,TRUE,'Main network');
        
3.7.4.7 Remove Interface Address

    Remove an associated address from an interface

    Definition:
        api.remove_interface_address(address inet)

    Arguments:
        address - IP address to deregister

    Rules:
        None

    Example:
        SELECT api.remove_interface_address('10.0.0.1');