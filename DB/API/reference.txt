IMPULSE - Official Documentation                                    Grant Cohoe
Version 1.0                                              Computer Science House
June XX, 2011                                 Rochester Institute of Technology


                              API Reference Guide

Status of this Memo

    This document is to serve as a reference guide to the API functions of 
    the IMPULSE software. All interactions with the application should 
    occur with the specified functions. 
    
Copyright Notice

    The IMPULSE development team doesn't care who uses their software. Just 
    don't expect a whole lot of help if it breaks.

Table of Contents (line number)

    1. Abstract . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
    2. Conventions . . . . . . . . . . . . . . . . . . . . . . . . . . . .   XX
    3. Functions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
      3.1 DHCP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   XX
      3.2 DNS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
      3.3 Firewall . . . . . . . . . . . . . . . . . . . . . . . . . . . .   XX
      3.4 IP  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
      3.5 Management . . . . . . . . . . . . . . . . . . . . . . . . . . .   XX
      3.6 Network . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
      3.7 Systems  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . XX
    4. Function Quick Index . . . . . . . . . . . . . . . . . . . . . . . .  XX
    5. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . . . . XX
    6. References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  XX
    7. Contacts  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . XX


-------------------------------------------------------------------------------
1. Abstract
-------------------------------------------------------------------------------

1.1 Project Origin

    IMPULSE came about as a result of the growing need to replace the machine 
    registration system of the Computer Science House, called Start. Written 
    by user Joe Sunday (sunday) Start has served our needs very well. However 
    lately there have been a few issues with things breaking over the years, 
    and a lack of IPv6 support has caused many other members to attempt to 
    it. However all previous attempts have failed due to lack of interest, 
    failure to understand the complexity of all requirements, and a general 
    pessimistic attitude. 
    
    To avoid these complications, IMPULSE was developed in secret with only 
    a few select people knowing of its existance. Being on co-op with 
    Anheuser-Busch in Baldwinsville NY, I had a lot more time available to 
    work on this project. The people brought on board to help were people I 
    trusted to be able to complete their tasks by a given deadline and who 
    would take the initiative to help out when needed. 
    
    If all goes according to plan, IMPULSE will be released to the CSH public 
    the first week of 2011-1. 
    
    Grant Cohoe
    Project Lead - IMPULSE
    
1.2 Project Design

    Previous incarnations and attempts at this project have usually revolved 
    around a complication web application and a moderately simple database 
    backend. This is perfectly acceptable in that it keeps the communication to 
    the backend database to a minimum. 
    
    IMPULSE goes about this a completely different way. To provide for easy 
    access by potential clients across multiple operating systems, interfaces, 
    and other applications, IMPULSE is designed to remove all thought from 
    the client. All core logic and functions exist within the database. 
    This allows for clients to be very simple and dumb, letting the backend 
    handle all data validation, rules, and backend processes. 
    
    This is accomplished with the advanced features of PostgreSQL, an open-
    source RDBMS with a lot of cool stuff. Most notably, the INET and CIDR 
    datatypes. This allows for easy manipulation of IP address data without 
    having to write custom functions. It's ability to also have functions 
    written in other languages is also vital to our success. For example, 
    Postgres functions can be written in Perl, and take advantage of 
    everything that Perl can offer. So in a nutshell, you can have Perl 
    in your database. How cool is that?
    
1.3 Client Interaction

    Client can interact with the database via a set of API functions. These 
    functions handle all interaction in and out of the application, and 
    provide a standard set of instructions across any client. This ensures 
    that everyone is getting the same data, and there are no large queries 
    from the clients. 
    
1.4 Official Clients

    The following clients are officially "supported":
    
    1) Desktop Web - all features, all information
    2) Mobile Web - Critical features, most information
    3) Command Line - all features, all information

-------------------------------------------------------------------------------
2. Conventions
-------------------------------------------------------------------------------

2.1 SQL Syntax

    Clients should execute queries in the following format:

        SELECT schema.function();
    
    The inclusion of the schema is critical since all functions are 
    catagorized into the appropriate schemas. The default search path is set 
    to "public", which contains nothing.
    
2.2 Arguments

    Certain arguments can be NULL, which will trigger either a default value 
    or some other function to occur. NULL should be placed in the function 
    without any ' or " marks around it. 
    
        SELECT schema.function('regular_arg',NULL);
        
    There is a difference between " and ' marks. Quotation marks (") are used 
    to identify schemas, tables, and columns. Single quote marks (') are used 
    for strings. 
    

2.3 Information Retreval

    All information is provided in Views. A Postgres View is a template for 
    information that you can easy get. It can be made up of a very complex 
    SQL query, but referenced in a single word. For example, the query
    
        SELECT * FROM "public"."table1" 
            JOIN "private"."table5" ON
            "public"."table1"."index" = 
            "private"."table5"."index"
            ORDER BY "private"."table5"."value"
            LIMIT 1 DESC;
            
    This query can be made into a view, which would then look like:
    
        SELECT * FROM "public"."myview";
        
    Same information, much easier to work with in your application.
    
    You can specify certain columns to select to make your query perform more 
    optimal. This applies to both Views and Tables. 
    
        SELECT "index","value","comment" FROM "public"."myview";
        
-------------------------------------------------------------------------------
3. Functions
-------------------------------------------------------------------------------

    All of the API functions are provided in the API schema. This is the only 
    way you should interact with this application. While there is no 
    technical enforcement, it is how this application was intended to 
    function. Not using the API functions can lead to incorrect or incomplete 
    data being entered. 
    
    Functions are broken down into the schemas they affect. The schemas in 
    this application are:
    
        1) DHCP
        2) DNS
        3) Firewall
        4) IP
        5) Management
        6) Network
        7) Systems









    
-------------------------------------------------------------------------------        
4. Function Quick Index
-------------------------------------------------------------------------------