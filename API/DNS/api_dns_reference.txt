-------------------------------------------------------------------------------
3.2 DNS (Domain name resolution and records)
-------------------------------------------------------------------------------

3.2.1 Overview

    DNS records are more than just names. They can point to services, and help
    maintain uptime by having backup service machines on the network. 
    IMPULSE was designed to interface with the BIND DNS server to provide all 
    common record types for a number of different domains. 

3.2.2 Record Types

    IMPULSE has the ability to maintain the following records:

    A - IPv4 address
    AAAA - IPv6 address
    TXT - Textual information about a host
    SPF - Textual information about a host
    MX - Mail server
    NS - Name server (DNS server)
    SRV - Service record
    CNAME - Alias to another A or AAAA

    There are various rules in effect governing what records can be created 
    in a given zone. This is to ensure no funky DNS shenanigans and other 
    bad practices.

    1) A single hostname can only have one A and/or one AAAA record
    2) There may only be one TXT or SPF record per hostname
    3) No two MX records can have the same preference in the same zone
    4) Only one NS may be elected the Primary NS of a zone
    5) Records in IMPULSE cannot traverse zones

3.2.3 Terminology

    Throughout this application, the terms "domain" and "zone" are used 
    interchangably. However they mean the same thing. Zone is frequently 
    used in the configuration of the DNS server, whily domain is frequently 
    used in outside applications and internet terminology. 

    Zones may be updated via the 'nsupdate' utility, however to prevent 
    just anyone from updating, DNS Keys are used. These are strings of 
    characters that are used to authenticate to a DNS server to allow 
    dynamic updates to occur. Each zone has one key that allows access. 

3.2.4 Functions

3.2.4.1 Create DNS Key

    Create a new DNS key. 

    Definition:
        api.create_dns_key(input_keyname text, input_key text, 
        input_owner text, input_comment text)

    Arguments:
        input_keyname - The name of the key to create
        input_key - The string that is the key
        input_owner - The owner of the key (or NULL for current user)
        input_comment - A comment on the key (or NULL for no comment)

    Returns:
        void

    Rules:
        Key names must be unique (primary key)

    Example:
        SELECT api.create_dns_key('example_key','oi0idf0sajfke9ur93',
        NULL,'example.com zone key');

3.2.4.2 Create DNS Zone

    Create a new DNS zone

    Definition:
        api.create_dns_zone(input_zone text, input_keyname text, 
        input_forward boolean, input_shared boolean, 
        input_owner text, input_comment text)

    Arguments:
        input_zone - The domain to create
        input_keyname - The DNS key to use for updates
        input_forward - Is this a forward or reverse zone
        input_shared - Can other uses create records in this zone
        input_owner - The owning username (or NULL for current)
        input_comment - A comment on the zone (or NULL for no comment)

    Returns:
        void

    Rules:
        Zone names must be unique (primary key)
        Keyname must exist in "dns"."keys" (foreign key)

    Example:
        EXAMPLE api.create_dns_zone('example.com','example_key',TRUE,
        TRUE,NULL,'example.com domain');

3.2.4.3 Create DNS A or AAAA Record (Resource)

    Register a new host address record

    Definition:
        api.create_dns_address(address inet, hostname text, zone text, 
        ttl integer, owner text)

    Arguments:
        address - The IP address of this record
        hostname - The specific hostname that owns the record
        zone - The DNS domain the record is for
        ttl - Time to Live (or NULL for the default value)
        owner - The username who owns this resource

    Returns:
        void

    Rules:
        Only one A or AAAA record per hostname (unique)
        Addresses can have either an A or AAAA record, not both (unique)

    Example:
        SELECT api.create_dns_address('10.0.0.1', 'hostname', 'example.com', 
        NULL, 'john.doe');

3.2.4.4 Create DNS Mailserver Record

    Create a new MX record for a mailserver

    Definition:
        api.create_dns_mailserver(hostname text, domain text, 
        preference integer, ttl integer, input_owner text)

    Arguments:
        hostname - The name of the mailserver (from "dns"."a")
        domain - The domain of the record
        preference - The preference level of the record (lower is more)
        ttl - Time to Live (or NULL for default)
        input_owner - Owner of the record (or NULL for current user)

    Returns:
        void

    Rules:
        No two records in a zone can have the same preference (unique)

    Example:
        SELECT api.create_dns_mailserver('mail','example.com',10,
        36500,'root');

3.2.4.5 Create DNS Nameserver Record

    Creata a new NS record for a nameserver

    Definition:
        api.create_dns_nameserver(hostname text, domain text, 
        isprimary boolean, ttl integer, input_owner text)

    Arguments:
        hostname - Name of the nameserver
        domain - Zone of the record
        isprimary - Is this the primary nameserver for the zone
        ttl - Time to Live (or NULL for default)
        input_owner - Owner of the record (or NULL for current user)

    Returns:
        void

    Rules:
        Only one primary NS per zone (trigger)

    Example:
        SELECT api.create_dns_nameserver('ns1','example.com',TRUE,NULL,NULL);

3.2.4.6 Create DNS SRV Record

    Create a DNS service record. This does not provide syntax checking of 
    your record, so you must ensure that the alias behaves the way you 
    expected. 

    Definition:
        api.create_dns_srv(alias text, target text, zone text, 
        priority integer, weight integer, port integer, ttl integer, 
        input_owner text)

    Arguments:
        alias - The name of this record
        target - The target A or AAAA of this record
        zone - The zone of this record
        priority - SRV priority (lower is more)
        weight - SRV weight (higher is more)
        port - The port of the service
        ttl - Time to Live (or NULL for default)
        input_owner - Owner of the record (or NULL for current user)

    Returns:
        void

    Rules:
        Target A or AAAA must exist

    Example:
        SELECT api.create_dns_srv('_ldap._tcp','ldap','example.com',
        0,0,389,NULL,'root');

3.2.4.7 Create DNS CNAME Record

    Create a new alias name record

    Definition:
        api.create_dns_cname(alias text, target text, zone text, ttl integer)

    Arguments:
        alias - The name of the new record
        target - The target of this pointer
        zone - The zone of the record
        ttl - Time to Live (or NULL for default)

    Returns:
        void

    Rules:
        Target must exist

    Example:
        SELECT api.create_dns_cname('www','webserver','example.com',NULL);

3.2.4.8 Create DNS TXT Record

    Create a new TXT or SPF record

    Definition:
        api.create_dns_txt(hostname text, zone text, text text, type text,
        ttl integer, input_owner text)

    Arguments:
        hostname - The hostname of the record
        zone - The zone of the record
        text - The text to be placed in the record
        type - TXT or SPF (subtle differences)
        ttl - Time to Live (or NULL for default)

    Returns:
        void

    Rules:
        Only one TXT or SPF record per hostname (unique)

    Example:
        SELECT api.create_dns_txt('webserver','example.com',
        'located in a black hole','TXT',NULL,NULL);

3.2.4.9 Remove DNS Key

    Remove a DNS key from use

    Definition:
        api.remove_dns_key(keyname text)

    Arguments:
        keyname - The name of the key to remove

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_dns_key('example_key');

3.2.4.10 Remove DNS Zone

    Remove a DNS zone from the database

    Definition:
        api.remove_dns_zone(zone text)

    Arguments:
        zone - The name of the zone to remove

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_dns_zone('example.com');

3.2.4.11 Remove DNS A or AAAA Record

    Remove a host address record

    Definition:
        api.remove_dns_address(address inet)

    Arguments:
        address - The address of the record to remove

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_dns_address('10.0.0.1');

3.2.4.12 Remove DNS Mailserver Record

    Remove a MX record for a mailserver

    Definition:
        api.remove_dns_mailserver(hostname text, domain text)

    Arguments:
        hostname - The name of the mailserver
        domain - The zone of the record

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_dns_mailserver('mail','example.com');

3.2.4.13 Remove DNS Nameserver Record

    Remove a NS nameserver record

    Definition:
        api.remove_dns_nameserver(hostname text, domain text)

    Arguments:
        hostname - The name of the nameserver
        domain - The zone of the record

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_dns_nameserver('ns1','example.com');

3.2.4.14 Remove DNS SRV Record

    Remove a service record

    Definition:
        api.remove_dns_srv(alias text, target text, zone text)

    Arguments:
        alias - The alias of the record
        target - The target of the record
        zone - The zone of the record

    Returns:
        void        

    Rules:
        None

    Example:
        SELECT api.remove_dns_srv('_ldap._tcp','ldap','example.com');

3.2.4.15 Remove DNS CNAME Record

    Remove an alias name record

    Definition:
        api.remove_dns_cname(alias text, target text, zone text)

    Arguments:
        alias - The name of the record
        target - The target of the pointer
        zone - The zone of the record

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_dns_cname('www','webserver','example.com');

3.2.4.16 Remove DNS TXT Record

    Remove a TXT or SPF record

    Definition:
        api.remove_dns_txt(hostname text, zone text, type text)

    Arguments:
        hostname - Hostname of the record to remove
        zone - Zone of the record
        type - Type of record to remove

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_dns_txt('webserver','example.com','TXT');

3.2.4.17 Get Reverse Domain From IP Address

    Generate the reverse DNS string from a given IP address. This uses an 
    external Perl module to easily return the reverse string.

    Definition:
        api.get_reverse_domain(INET);

    Arguments:
        INET - An IP address (either v4 or v6)

    Returns:
        Text

    Rules:
        None

    Example:
        SELECT api.get_reverse_domain('2001:db0::dead:beef:cafe');

3.2.4.18 Validate DNS Domain

    Validate a DNS hostname or domain. Can take either a hostname, domain, 
    or FQDN. 

    Definition:
        api.validate_domain(hostname text, domain text)

    Arguments:
        hostname - Hostname to check (or NULL for Domain check only)
        domain - Domain to checl (or NULL for Hostname check only)

    Returns:
        Boolean

    Rules:
        Both arguments cannot be null

    Example:
        SELECT api.validate_domain('server','example.com');

3.2.4.19 Validate SRV

    Validate the text of a SRV record. The Perl module doesnt do this, so we 
    have to do it here.

    Definition:
        api.validate_srv(input text)

    Arguments:
        input - The record to validate

    Returns:
        Text

    Rules:
        None

    Example:
        SELECT api.validate_srv('_ldap._tcp');