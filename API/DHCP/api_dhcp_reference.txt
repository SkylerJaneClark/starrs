-------------------------------------------------------------------------------
3.1 DHCP (Stateful configuration of addresses)
-------------------------------------------------------------------------------

3.1.1 Overview

    Hosts on the network can receive their address configuration in multiple 
    ways. The information contained in this schema provides the underlying 
    framework for establishing how IP resources are distributed. 

    Stateful configuration is the process of a server handing a client it's 
    infomation. This is the most common method of configuring machines on a 
    network, as it is very easy to push out a variety of configuration 
    directives to a host, a class of hosts, or subnets. 

    Stateless configuration is when a client determines its network address 
    information from what is sees in the broadcast traffic. Stateless 
    autoconfiguration was implemented in IPv4 with 169.254.0.0 addresses, 
    commonly perceived to occur when your network DHCP server is not 
    operational. Stateless Autoconfiguration is an integral part of IPv6 and 
    is thus supported in this application.

3.1.2 Objects

3.1.2.1 Configuration Types

    This application (by default) supports the following methods of 
    configuration for IP addresses:

    Static - Hosts are configured manually (IPv4 or IPv6)
    DHCP - Hosts obtain IPv4-specific configuration information from a server
    DHCPv6 - Hosts obtain IPv6-specific configuration information from a server
    Autoconf - IPv6 stateless autoconfiguration with Neighbor Discovery

3.1.2.2 Classes

    DHCP options can be delivered to certain groups of hosts, referred to as 
    classes. A common use of classes is the enabling of a PXE netboot server on 
    a network. You don't want every single host to pick up the directive to 
    boot to the PXE server, so you can specify a group (class) of hosts to do 
    so instead. This allows for different groups of hosts to have unique 
    options within the shared network.

3.1.2.3 Options

    DHCP classes and subnets can be configured with options. These options are 
    interpreted by the DHCP server through a configuration file. Note that this 
    application does not verify if the option you pass to it is valid. Check 
    the system logs to make sure the server started correctly.

3.1.3 Functions
    
3.1.3.1 Create DHCP Class

    Create a new DHCP class in the database

    Definition:
        api.create_dhcp_class(class text, comment text)
    
    Arguments:
        class - The name of the class to be created
        comment - A comment on the class (or NULL for no comment)

    Returns:
        void

    Rules:
        No two classes can have the same name (primary key)
    
    Example:
        SELECT api.create_dhcp_class('netboot','Anthonys boot server project');
    

3.1.3.2 Create DHCP Class Option

    Assign an option to a given DHCP class

    Definition:
        api.create_dhcp_class_option(class text, option text, value text)
    
    Arguments:
        class - The name of the class to assign to
        option - The option declaration to insert
        value - The value of the option

    Returns:
        void

    Rules:
        Only one combination of class, option, value may exist (primary key)
    
    Example:
        SELECT api.create_dhcp_class_option('netboot','next-server',
        '"10.0.0.1"');

3.1.3.3 Create DHCP Subnet Option

    Assign a DHCP option to a subnet. Useful for routers, DNS servers, etc

    Definition:
        api.create_dhcp_subnet_option(subnet cidr, option text, value text)

    Arguments:
        subnet - The subnet to assign the option to
        option - The option declaration to insert
        value - The value of the option

    Returns:
        void

    Rules:
        Only one combination of subnet, option, value may exist (primary key)
    
    Example:
        SELECT api.create_dhcp_class_option('10.0.0.0/24','option-routers',
        '"10.0.0.254"');

3.1.3.4 Create DHCP Subnet Setting
    
    Create a DHCP subnet setting. These are different than options in that 
    only one directive can be made per subnet

    Definition:
        api.create_dhcp_subnet_setting(input_subnet cidr, input_setting 
        text, input_value text)

    Arguments:
        input_subnet - The subnet to apply to
        input_setting - The setting definition
        input_value - The value of the setting

    Returns:
        void

    Rules:
        Setting must be unique per subnet (primary key)

    Example:
        SELECT api.create_dhcp_subnet_setting('10.0.0.0/24',
        'max-lease-time','3600');

3.1.3.5 Create DHCP Range Setting

    Create a DHCP setting for a dynamic pool. 

    Definition:
        api.create_dhcp_range_setting(input_range text, input_setting text,
        input_value text)

    Arguments:
        input_range - Range name to create the setting on
        input_setting - The setting to create
        input_value - The value of the setting

    Returns:
        void

    Rules:
        Setting must be unique to range (primary key)
    
    Example:
        SELECT api.create_dhcp_range_setting('Dynamic pool',
        'option domain-name','"example.com"');

3.1.3.6 Remove DHCP Class

    Remove a DHCP class from the database

    Definition:
        api.remove_dhcp_class(class text)
    
    Arguments:
        class - The name of the class to be removed

    Returns:
        void

    Rules:
        None

    Example:
        SELECT api.remove_dhcp_class('netboot');

3.1.3.7 Remove DHCP Class Option

    Remove a configured class option from the database

    Definition:
        api.remove_dhcp_class_option(class text, option text, value text)
    
    Arguments:
        class - The name of the class
        option - The option declaration to remove
        value - The value of the option to remove

    Returns:
        void
    
    Rules:
        None
    
    Example:
        SELECT api.remove_dhcp_class_option('netboot','next-server',
        '"10.0.0.1"');

3.1.3.8 Remove DHCP Subnet Option

    Remove a configured subnet option from the database

    Definition:
        api.remove_dhcp_subnet_option(subnet cidr, option text, value text)

    Arguments:
        subnet - The subnet to remove the option/value from
        option - The option declaration to remove
        value - The value of the option to remove

    Returns:
        void
    
    Rules:
        None
    
    Example:
        SELECT api.remove_dhcp_subnet_option('10.0.0.0/24','option-routers',
        '"10.0.0.254"'); 

3.1.3.9 Remove DHCP Subnet Setting

    Remove a DHCP subnet setting (settings != options)

    Defintion:
        api.remove_dhcp_subnet_setting(input_subnet cidr, input_setting text)
    
    Arguments:
        input_subnet - The subnet to remove the setting from
        input_setting - The setting definition to remove
    
    Returns:
        void
    
    Rules:
        None
    
    Example:
        SELECT api.remove_dhcp_subnet_setting('10.0.0.0/24','max-lease-time');
    
3.1.3.10 Remove DHCP Range Setting

    Remove a DHCP range setting
    
    Definition:
        api.remove_dhcp_range_setting(input_range text, input_setting text)
    
    Arguments:
        input_range - The range to remove the setting from
        input_setting - The setting to remove
    
    Returns:
        void
    
    Rules:
        None
    
    Example:
        SELECT api.remove_dhcp_range_setting('Dynamic Pool','allow unknown');

3.1.3.11 Get DHCPD Static Hosts

    Get all the IPv4 DHCP hosts with a configured address. These are not 
    "static" registrations in the technical sense, but they are hosts that 
    receive their information via DHCP but get the same address every time.
    
    Definition:
        api.get_dhcpd_static_hosts()
    
    Arguments:
        None
    
    Returns:
        SetOf dhcp.dhcpd_static_hosts
    
    Rules:
        None
    
    Example:
        SELECT api.get_dhcpd_static_hosts();
    
3.1.3.12 Get DHCPD Dynamic Hosts
    Definition:
        api.get_dhcpd_dynamic_hosts()
    
    Arguments:
        None
    
    Returns:
        SetOf dhcp.dhcpd_dynamic_hosts
    
    Rules:
        None
    
    Example:
        SELECT api.get_dhcpd_dynamic_hosts();
    
3.1.3.13 Get DHCPD-enabled Subnets
    Definition:
        api.get_dhcpd_subnets()
    
    Arguments:
        None
    
    Returns:
        SetOf CIDR
    
    Rules:
        None
    
    Example:
        SELECT api.get_dhcpd_subnets();
    
3.1.3.14 Get DHCPD-enabled Subnet Options
    Definition:
        api.get_dhcpd_subnet_options(input_subnet cidr)
    
    Arguments:
        input_subnet - The subnet to get the options from
    
    Returns:
        SetOf dhcp.dhcpd_subnet_options
    
    Rules:
        None
    
    Example:
        SELECT api.get_dhcpd_subnet_options('10.0.0.0/24');
    
3.1.3.15 Get DHCPD-enabled Subnet Settings
    Definition:
        api.get_dhcpd_subnet_settings(input_subnet cidr)
    
    Arguments:
        input_subnet - The subnet to get the settings from
    
    Returns:
        SetOf dhcp.dhcpd_subnet_settings
    
    Rules:
        None
    
    Example:
        SELECT api.get_dhcpd_subnet_settings('10.0.0.0/24');
    
3.1.3.16 Get DHCPD Pool Options
    Definition:
        api.get_dhcpd_range_options(input_range text)
    
    Arguments:
        input_range - The name of the range to get the options of
    
    Returns:
        SetOf dhcp.dhcpd_range_options
    
    Rules:
        None
    
    Example:
        SELECT api.get_dhcpd_range_options('Dynamic Pool');
    
3.1.3.17 Get DHCPD Pool Settings
    Definition:
        api.get_dhcpd_range_settings(input_range text)
    
    Arguments:
        input_range - The name of the range to get the options of
    
    Returns:
        SetOf dhcp.dhcpd_range_settings
    
    Rules:
        None
    
    Example:
        SELECT api.get_dhcpd_range_settings('Dynamic Pool');
    
3.1.3.18 Get DHCPD Pools
    Definition:
        api.get_dhcpd_ranges()
    
    Arguments:
        None

    Returns:
        SetOf dhcp.dhcpd_subnet_ranges
    
    Rules:
        Range USE='ROAM'
    
    Example:
        SELECT api.get_dhcpd_ranges();